/**
 * Cohesion Default Configuration
 *
 * These are the default settings that come with cohesion.
 *
 * You shouldn't change this file directly as to avoid conflicts when updating
 * Cohesion. Instead all changes should go into the default-conf.json file
 * which will be used to overwrite any of these values.
 *
 * default-conf.json should contain all your application settings that are
 * common across all your environments (development, staging, production, etc).
 * Then separate configurations can be created for each environment and will be
 * used based on your APPLICATION_ENV environment setting.
 *
 * All settings here are required unless explicitly stated as 'optional'
 */
{
    /**
     * Global configurations are settings that may effect multiple areas of
     * the code. Global should only be used as a last resort if the
     * configuration doesn't fit in better in any of the other settings sections
     */
    "global": {
        "domain_name": "www.example.com",
        "production": false,
        "autoloader": {
            "cache_key": "autoloader_cache"
        }
    },

    /**
     * The application configuration section is what will be passed to your
     * business logic classes and should contain your business rule settings
     */
    "application": {
        "class": {
            "default": null,
            "prefix": "",
            "suffix": "Service"
        }
    },

    /**
     * The routing configuration section is used to decided how to deal with
     * incoming requests and decide which controller should be used to handle
     * it.
     *
     * We currently don't provide a way to specify specific routes and how they
     * will be handled. Rather Cohesion works on a simple yet effective default
     * route system.
     *
     * It will look for the first path segment that is a valid Controller then
     * check if the following path segment is a function of that Controller, if
     * it is then it will call that function with all the following path
     * segments as parameters to that function, if it's not a valid function
     * then all segments after the controller will be considered parameters to
     * the Controller's index function.
     *
     * Given the path /nothing/something/action/param1/param2?foo=bar
     * "nothing" is not a controller and will be ignored.
     * "something" matches the controller SomethingController (based on the
     * class prefix and suffix) and therefore that controller will be used.
     * "action" is a function of SomethingController therefore the resulting
     * call based on a request to that URI will be:
     * `SomethingController->action('param1', 'param2')`
     * To access the GET and POST parameters you can to use
     * $this->input->get('foo');
     *
     * For the home page (route '/') the default controller will be used with
     * the default function.
     */
    "routing": {
        "class": {
            "default": "Home",
            "prefix": "",
            "suffix": "Controller"
        },
        "function": {
            "default": "index",
            "prefix": "",
            "suffix": ""
        },
        /**
         * Redirects can be used to send a redirect. Each of the keys within
         * the redirects configuration are used as regular expressions to be
         * used to match the path. If the regex matches the page will be
         * redirected to the value here.
         */
        "redirects": {
            "^/favicon.ico$": "/assets/images/favicon.ico"
        }
    },

    /**
     * The view configuration section defines how the views will be generated.
     */
    "view": {
        /**
         * Used to define the class names so that the ViewFactory can create
         * the views based on just the base name. Eg, 'home' will create a
         * HomeView instance.
         */
        "class": {
            "default": "",
            "prefix": "",
            "suffix": "View"
        },
        /**
         * The default templating engine is CohesionMo which is basically an
         * extended version of Mustache with a couple of added functionalities
         * but can be overwritten.
         * The engine must implement the TemplateEngine interface so if you
         * want to use a different currently unsupported template engine you
         * can wrap it in a new class that implements the interface.
         */
        "template": {
            "engine": "\\Cohesion\\Templating\\CohesionMo",
            "directory": "www/templates", // Root template directory
            "extension": "html", // Template extension
            "default_layout": "index", // Root default template
            /**
             * vars is a set of default variables to be available in every
             * template.
             */
            "vars": {
                "title": "Cohesion",
                "site_name": "Cohesion",
                "asset_path": {
                    "root": "/assets",
                    "javascript": "/assets/js/",
                    "images": "/assets/images/",
                    "style": "/assets/style/" // CSS
                }
            },
            /**
             * To cache prerendered templates set either a directory or a ttl.
             * If you set the directory it will store the prerendered templates
             * on disk within that directory. The directory can either be a
             * relative path to the base directory or an absolute path
             * starting from '/'. Make sure the application server has write
             * access to the directory.
             * If you don't set a directory it will use the default system
             * cache and you can set the `ttl` for the cache keys.
             */
            /*
            "cache": false // Caching disabled
            */
            /*
            "cache": {
                "directory": "www/rendered_templates"
            }
            */
            "cache": {
                "ttl": 3600
            }
        },
        /**
         * CDN is OPTIONAL
         * Using Content Delivery Network will usually increase the speed of
         * viewing your site as well as drastically reducing server load as
         * all your static assets will be cached on a third party server that
         * usually have end points all around the globe.
         */
        "cdn": {
            /**
             * hosts is an array of FQDNs to use. It's recommended that you use
             * multiple CDN domains as nearly all browsers have a limit of
             * concurrent connections to the same domain. Adding multiple CDN
             * hosts will allow clients to download more assets concurrently.
             */
            "hosts": [
                // "//localhost"
            ],
            /**
             * Versioning is used to invalidate assets when they change.
             * Because the CDN will cache your static assets they will need
             * a new resource name every time you update your files, such as
             * updates to JavaScript files etc.
             *
             * It's important that if your CDN asks you whether or not to
             * include the query string you include it.
             *
             * File versions are basically just an MD5 check sum of the file.
             * To improve performance the version is stored in the local cache
             * and is only re-evaluated after the ttl has expired
             */
            "version": {
                "cache_prefix": "asset_version_",
                "ttl": 300 // Time to live in seconds
            }
        },
        /**
         * These are the accepted formats and the view class that matches them
         * If you want to use your own default view for HTML you should
         * overwrite it in your configuration. Eg, the format 'plain' will use
         * the PlainView by default.
         */
        "formats": {
            "plain": {
                "class": "Plain"
            },
            "html": {
                "class": "Template"
            },
            "json": {
                "class": "JSON"
            },
            "xml": {
                "class": "XML"
            }
        },
        /**
         * Mappings of various mime types to the format.
         * You probably shouldn't overwrite these but you can extend this if
         * want to implement other formats.
         */
        "mime_types": {
            "text/plain": {
                "format": "plain"
            },
            "text/html": {
                "format": "html"
            },
            "application/json": {
                "format": "json"
            },
            "application/xml": {
                "format": "xml"
            }
        }
    },

    /**
     * The data_access configuration section contains each of the data access
     * types that your application will use.
     * The key should match a data access interface or class. If a driver is
     * specified it will use that class otherwise it will try to use the
     * setting value.
     * `public SomethingDAO(Database $db)` will use the database setting and
     * instantiate the driver (MySQL).
     */
    "data_access": {
        "class": {
            "default": null,
            "prefix": "",
            "suffix": "DAO"
        },
        "database": {
            "driver": "MySQL",
            "host": "localhost",
            "port": 3306,
            "user": "root",
            "password": "",
            "database": "cohesion",
            "charset": "UTF8",
            /**
             * slave is OPTIONAL
             * The slave is used in a master-slave database setup.
             * You can override the user, password and database settings here
             * if you want to use different ones for the slaves, otherwise it
             * will use the same ones.
             */
            "slave": {
                /**
                 * The hosts is set as an array to be able to take multiple
                 * slaves.
                 * The slave that will be used will be selected at random each
                 * runtime but the same one will be used throughout a process.
                 */
                "hosts": [
                    "localhost"
                ]
            }
        },
        "cache": {
            "driver": "APC"
        }
    },

    /**
     * The object configuration section sets up the basic objects. There
     * shouldn't really be any reason to add anything extra in here as objects
     * are just dumb classes that store data.
     */
    "object": {
        "class": {
            "default": null,
            "prefix": "",
            "suffix": ""
        }
    },

    /**
     * The utility configuration section provides the config used by the
     * various utility classes.
     *
     * Each of these sections are optional and only required if you want to use
     * the utility.
     */
    "utility": {
        "class": {
            "default": null,
            "prefix": "",
            "suffix": ""
        },
        /**
         * Email utility for sending system generated emails.
         * The Email utility uses Views to display the emails therefore all the
         * template engine and default template variables set in the view
         * section also apply here.
         */
        "email": {
            "class": {
                "default": "",
                "prefix": "",
                "suffix": "Email"
            },
            "default_layout_template": "email/index",
            /**
             * The default to use for who the emails are from
             */
            "from": {
                "name": "Admin",
                "email": "admin@example.com"
            },
            /**
             * The default headers to be sent with the email
             */
            "headers": {
                "MIME-Version": "1.0",
                "Content-Type": "text/html; charset=UTF-8"
            },
            /**
             * An array of email addresses to BCC in every email sent by the system
             */
            "bcc": [
            ]
        }
    }
}
